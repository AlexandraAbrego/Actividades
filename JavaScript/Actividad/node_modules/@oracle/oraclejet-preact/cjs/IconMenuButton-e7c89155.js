/* @oracle/oraclejet-preact: 15.1.3 */
'use strict';

var jsxRuntime = require('preact/jsx-runtime');
require('./UNSAFE_ButtonLayout.js');
require('./PRIVATE_ThemedIcons/ChevronDownIcon.js');
require('./UNSAFE_Menu.js');
var hooks_UNSAFE_useMenuAction = require('./hooks/UNSAFE_useMenuAction.js');
var hooks_UNSAFE_useTooltip = require('./hooks/UNSAFE_useTooltip.js');
require('./UNSAFE_BaseButton.js');
var preact = require('preact');
var compat = require('preact/compat');
var hooks = require('preact/hooks');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');
var BaseButton = require('./BaseButton-ce8c5c12.js');
var ButtonLayout = require('./ButtonLayout-ffa5087b.js');
var index = require('./index-6051d204.js');
var Menu = require('./Menu-35db79c8.js');

/**
 * A IconMenuButton is a combined action and menu button.
 */
const IconMenuButton = compat.forwardRef(({ children, tooltip, accessibleLabel, variant = 'outlined', isDisabled = false, isMenuOpen = false, isIconOnly = false, onToggleMenu, size = 'md', width, icon, 'aria-describedby': ariaDescribedBy }, ref) => {
    const buttonRef = hooks.useRef(null);
    hooks.useImperativeHandle(ref, () => buttonRef.current, [buttonRef]);
    const { triggerProps, menuProps } = hooks_UNSAFE_useMenuAction.useMenuAction({
        isDisabled: isDisabled,
        onToggleMenu: onToggleMenu,
        isMenuOpen: isMenuOpen,
        anchorRef: buttonRef
    });
    const { tooltipContent, tooltipProps } = hooks_UNSAFE_useTooltip.useTooltip({
        text: tooltip ? tooltip : accessibleLabel,
        isDisabled: isMenuOpen
    });
    const rootButton = (jsxRuntime.jsx(preact.Fragment, { children: jsxRuntime.jsxs(BaseButton.BaseButton, { ...utils_UNSAFE_mergeProps.mergeProps(tooltipProps, triggerProps), styling: isMenuOpen ? ['min', 'active'] : ['min'], isDisabled: isDisabled, variant: variant, width: width, size: size, ref: buttonRef, "aria-describedby": ariaDescribedBy, "aria-label": accessibleLabel ?? tooltip, children: [jsxRuntime.jsx(ButtonLayout.ButtonLayout, { display: 'icons', startIcon: icon, endIcon: isIconOnly ? null : jsxRuntime.jsx(index.SvgChevronDown, {}), size: size }), tooltipContent] }) }));
    return isDisabled ? (rootButton) : (jsxRuntime.jsxs(preact.Fragment, { children: [rootButton, jsxRuntime.jsx(Menu.Menu, { ...menuProps, children: children })] }));
});

exports.IconMenuButton = IconMenuButton;
//# sourceMappingURL=IconMenuButton-e7c89155.js.map

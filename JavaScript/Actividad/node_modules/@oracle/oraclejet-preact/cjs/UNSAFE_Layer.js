/* @oracle/oraclejet-preact: 15.1.3 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var compat = require('preact/compat');
var UNSAFE_Environment = require('./index-8629f35b.js');
var useThemeInterpolations = require('./useThemeInterpolations-160b079d.js');
require('preact');
require('./Common.js');
require('./Common/themes.js');
require('./Common/themes/redwood/theme.js');
require('./Common/themes/themeContract.css.js');
require('preact/jsx-runtime');
require('preact/hooks');
require('./hooks/UNSAFE_useColorScheme.js');
require('./hooks/UNSAFE_useScale.js');
require('./utils/UNSAFE_interpolations/theme.js');
require('./UNSAFE_Theme.js');
require('./utils-d94a578c.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-58437073.js');
require('./_curry1-b2509ef1.js');
require('./_curry3-4effaded.js');
require('./_curry2-670aeaae.js');
require('./_has-a8e6bd8f.js');

const _LOGICAL_PARENT = '__oj_logical_parent';
const Layer = (props) => {
    const context = compat.useContext(UNSAFE_Environment.LayerContext);
    const defaultHost = context.getHost?.();
    const host = compat.useMemo(() => defaultHost, [defaultHost]);
    const [layerContainer, setLayerContainer] = compat.useState(null);
    // because the children are being rendered into a portal that is out of the flow of parent dom,
    // we need to specify the colorScheme and scale class names here to pick up the correct CSS styles.
    const classes = useThemeInterpolations.useThemeInterpolations();
    // Really need useLayoutEffect instead of useEffect here. Otherwise the re-parented
    // content does not get re-rendered with valid ref's
    compat.useLayoutEffect(() => {
        if (!host)
            return;
        const doc = host.ownerDocument ?? document;
        const layer = doc.createElement('div');
        if (props.logicalParentRef) {
            layer[_LOGICAL_PARENT] = props.logicalParentRef.current;
        }
        host.appendChild(layer);
        setLayerContainer(layer);
        return () => {
            if (host && layer && host.contains(layer)) {
                delete layer[_LOGICAL_PARENT];
                host.removeChild(layer);
            }
            setLayerContainer(null);
        };
    }, [host]);
    // add the colorScheme and scale classes if there is a layerContainer
    if (layerContainer) {
        // use the theme interpolations to set the appropriate style classes for colorScheme and scale
        layerContainer.className = classes;
    }
    return layerContainer && compat.createPortal(props.children, layerContainer);
};

exports.LayerContext = UNSAFE_Environment.LayerContext;
exports.LayerManager = UNSAFE_Environment.LayerManager;
exports.Layer = Layer;
//# sourceMappingURL=UNSAFE_Layer.js.map

/* @oracle/oraclejet-preact: 15.1.3 */
import { jsx, jsxs } from 'preact/jsx-runtime';
import { Fragment } from 'preact';
import { useCallback, useState, useMemo } from 'preact/hooks';
import { memo } from 'preact/compat';
import "./UNSAFE_ExpandableList.css";
import './utils/UNSAFE_classNames.js';
import { useId } from './hooks/UNSAFE_useId.js';
import { useTranslationBundle } from './hooks/UNSAFE_useTranslationBundle.js';
import { containsKey, isSameKey } from './utils/UNSAFE_keys.js';
import './UNSAFE_Button.js';
import './UNSAFE_HiddenAccessible.js';
import './PRIVATE_ThemedIcons/ExpandIcon.js';
import { CollapseIcon } from './PRIVATE_ThemedIcons/CollapseIcon.js';
import { GROUP_SELECTOR, excludeGroup, ListGroupHeader, GroupLoadingIndicator } from './PRIVATE_List.js';
import { LiveRegion } from './UNSAFE_LiveRegion.js';
import { useUser } from './hooks/UNSAFE_useUser.js';
import { keyExtractor } from './utils/PRIVATE_collectionUtils.js';
import { L as List } from './List-0ed075db.js';
import { H as HiddenAccessible } from './HiddenAccessible-ce8ac79b.js';
import { c as classNames } from './classNames-bd44965c.js';
import { B as Button } from './Button-b9f73682.js';
import { S as SvgChevronDown } from './index-7e62fa17.js';
import './index-fea14c1c.js';
import './Common.js';
import './Common/themes.js';
import './Common/themes/redwood/theme.js';
import './Common/themes/themeContract.css.js';
import './UNSAFE_BaseButton.js';
import './BaseButton-cad1ad64.js';
import './hooks/UNSAFE_usePress.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useActive.js';
import './utils/UNSAFE_interpolations/dimensions.js';
import './utils/UNSAFE_arrayUtils.js';
import './utils/UNSAFE_size.js';
import './UNSAFE_Theme.js';
import './utils-54ff3417.js';
import './_curry1-e8bdb9c0.js';
import './utils/UNSAFE_mergeInterpolations.js';
import './_curry3-ee7f2987.js';
import './_curry2-cf5be105.js';
import './_has-550640ef.js';
import './utils/PRIVATE_clientHints.js';
import './clientHints-f1e5a5eb.js';
import './hooks/UNSAFE_useTabbableMode.js';
import './utils/UNSAFE_mergeProps.js';
import './UNSAFE_ButtonLayout.js';
import './ButtonLayout-67cf706d.js';
import './UNSAFE_Text.js';
import './Text-b9efc7bc.js';
import './UNSAFE_Text/themes/TextStyles.css.js';
import './TextStyles.styles.css';
import './vanilla-extract-recipes-createRuntimeFn.esm-3499e5fd.js';
import './UNSAFE_Icon.js';
import './Icon-4c30465d.js';
import './hooks/UNSAFE_useTooltip.js';
import './UNSAFE_Floating.js';
import './Floating-b522c321.js';
import './index-be8856c4.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './hooks/UNSAFE_useComponentTheme.js';
import './utils/UNSAFE_logger.js';
import './UNSAFE_Floating/themes/redwood/FloatingTheme.js';
import './UNSAFE_Floating/themes/FloatingStyles.css.js';
import './FloatingStyles.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.css.js';
import './UNSAFE_Floating/themes/redwood/FloatingBaseTheme.styles.css';
import './UNSAFE_Floating/themes/redwood/FloatingVariants.css.js';
import './vanilla-extract-dynamic.esm-2760c7a0.js';
import './UNSAFE_Floating/themes/FloatingContract.css.js';
import './UNSAFE_Layer.js';
import './useThemeInterpolations-92e4f051.js';
import './hooks/UNSAFE_useColorScheme.js';
import './hooks/UNSAFE_useScale.js';
import './utils/UNSAFE_interpolations/theme.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './hooks/UNSAFE_useAnimation.js';
import './useAnimation-f6453e4b.js';
import './hooks/UNSAFE_useThemeInterpolations.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentTheme.js';
import './hooks/UNSAFE_useTooltip/themes/TooltipContentStyles.css.js';
import './TooltipContentStyles.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.css.js';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentBaseTheme.styles.css';
import './hooks/UNSAFE_useTooltip/themes/redwood/TooltipContentVariants.css.js';
import './TooltipContentVariants.styles2.css';
import './UNSAFE_Icon/themes/IconStyle.css.js';
import './IconStyle.styles.css';
import './hoc/PRIVATE_withDirectionIcon.js';
import './hooks/UNSAFE_useViewportIntersect.js';
import './hooks/UNSAFE_useInteractionStyle.js';
import './utils/UNSAFE_interpolations/flexitem.js';
import './flexitem-81fc9b8e.js';
import './keys-1a44d7b1.js';
import './PRIVATE_List/themes/ListStyles.css.js';
import './ListStyles.styles.css';
import './UNSAFE_GroupedList/themes/redwood/GroupedListTheme.js';
import './UNSAFE_GroupedList/themes/GroupedListStyles.css.js';
import './GroupedListStyles.styles.css';
import './UNSAFE_GroupedList/themes/redwood/GroupedListBaseTheme.css.js';
import './UNSAFE_GroupedList/themes/redwood/GroupedListBaseTheme.styles.css';
import './SkeletonContainer-7000ec90.js';
import './UNSAFE_Flex.js';
import './Flex-200101e3.js';
import './utils/UNSAFE_interpolations/boxalignment.js';
import './utils/UNSAFE_interpolations/flexbox.js';
import './flexbox-13144528.js';
import './UNSAFE_Skeleton.js';
import './Skeleton-171a4b82.js';
import './utils/UNSAFE_interpolations/borders.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonTheme.js';
import './UNSAFE_Skeleton/themes/SkeletonStyles.css.js';
import './SkeletonStyles.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.css.js';
import './UNSAFE_Skeleton/themes/redwood/SkeletonBaseTheme.styles.css';
import './UNSAFE_Skeleton/themes/redwood/SkeletonVariants.css.js';
import './PRIVATE_LoadMoreCollection.js';
import './LoadMoreCollection-502d8012.js';
import './PRIVATE_Collection.js';
import './Collection-7e0fe4fb.js';
import './PRIVATE_VirtualizedCollection.js';
import './VirtualizedCollection-8636699b.js';
import './UNSAFE_FocusTrap.js';
import './FocusTrap-f8afef25.js';
import './utils/PRIVATE_tabbableUtils.js';
import './_arity-674d41d6.js';
import './hooks/PRIVATE_useSelection.js';
import './hooks/PRIVATE_useCurrentKey.js';
import './hooks/PRIVATE_useCollectionFocusRing.js';
import './hooks/PRIVATE_useTabbableModeSet.js';
import './hooks/PRIVATE_useItemAction.js';
import './UNSAFE_Selector.js';
import './PRIVATE_ThemedIcons/CheckboxOffIcon.js';
import './PRIVATE_Icons/CheckboxOff.js';
import './PRIVATE_ThemedIcons/CheckboxOnIcon.js';
import './PRIVATE_Icons/CheckboxOn.js';
import './PRIVATE_ThemedIcons/CheckboxMixedIcon.js';
import './PRIVATE_Icons/CheckboxMixed.js';
import './UNSAFE_Selector/themes/SelectorStyles.css.js';
import './SelectorStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconTheme.js';
import './UNSAFE_Radio/themes/RadioIconStyles.css.js';
import './RadioIconStyles.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.css.js';
import './UNSAFE_Radio/themes/redwood/RadioIconBaseTheme.styles.css';
import './UNSAFE_Radio/themes/redwood/RadioIconVariants.css.js';
import './RadioIconVariants.styles.css';
import './hooks/PRIVATE_useCollectionGestureContext.js';

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
/**
 * A hook that handles mouse and keyboard gesture that toggles the expanded state.
 * @param keyExtractor
 * @param expanded
 * @param onToggle
 * @returns
 */
function useExpandCollapse(keyExtractor, expanded, onToggle) {
    const { direction } = useUser();
    const isRtl = direction === 'rtl';
    const onClick = useCallback((event) => {
        handleToggle(event, keyExtractor, onToggle);
    }, [keyExtractor, onToggle]);
    const onKeyUp = useCallback((event) => {
        if (event.key === 'Enter' || event.key === ' ') {
            handleToggle(event, keyExtractor, onToggle);
        }
        else if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            const isLeftArrow = event.key === 'ArrowLeft' && !isRtl;
            handleArrowKey(isLeftArrow, event.target, expanded, keyExtractor, onToggle);
            // arrow key might cause it to scroll horizontally
            event.preventDefault();
            event.stopPropagation();
        }
    }, [keyExtractor, onToggle]);
    return onToggle ? { onClick, onKeyDown, onKeyUp } : {};
}
// prevent default (propagation) for keyDown to prevent scrolling the container
const onKeyDown = (event) => {
    if (event.key === 'Enter' || event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
        event.preventDefault();
    }
};
const handleArrowKey = (isLeftArrow, target, expanded, keyExtractor, onToggle) => {
    const itemKey = keyExtractor(target);
    if (onToggle && itemKey) {
        const contains = containsKey(expanded, itemKey);
        if ((isLeftArrow && contains) || (!isLeftArrow && !contains)) {
            onToggle({ value: itemKey });
        }
    }
};
const handleToggle = (event, keyExtractor, onToggle) => {
    const itemKey = keyExtractor(event.target);
    if (onToggle && itemKey) {
        onToggle({ value: itemKey });
        if (event.type === 'click') {
            event.stopPropagation();
        }
    }
};

/**
 * An ExpandableList shows a two-level group of items where each group header can be expand or collapse.
 */
function ExpandableList({
  children,
  currentKey,
  data,
  onSelectionChange,
  onToggle,
  ...props
}) {
  const [statusText, setStatusText] = useState('');
  const translations = useTranslationBundle('@oracle/oraclejet-preact');
  const expandCollapseProps = useExpandCollapse(element => {
    if (element.getAttribute('role') === 'treegrid') {
      return currentKey === undefined ? null : currentKey;
    }
    return keyExtractor(element, GROUP_SELECTOR);
  }, data == null ? emptyKeys : data.expanded, onToggle ? useCallback(detail => {
    onToggle(detail);
    if (data) {
      const previouslyExpanded = containsKey(data?.expanded, detail.value);
      setStatusText(previouslyExpanded ? translations.expandableList_groupCollapse() : translations.expandableList_groupExpand());
      // we need to clear the live region text otherwise screenreader
      // won't read again if the content did not change the next time
      setTimeout(() => {
        setStatusText('');
      }, 1000);
    }
  }, [onToggle, data]) : undefined);
  const descId = useId();
  const stableDescId = useMemo(() => {
    // this should never change after mounted
    return descId;
  }, []);
  const createHierarchicalContext = (context, options) => {
    const expanderRenderer = options !== undefined ? () => jsx(Expander, {
      itemKey: context.metadata.key,
      expanded: options.expanded,
      onToggle: options.onToggle
    }) : undefined;
    return {
      ...context,
      parentKey: context.metadata.parentKey,
      leaf: context.metadata.isLeaf ?? true,
      depth: context.metadata.treeDepth ?? 1,
      expander: expanderRenderer
    };
  };
  const handleSelectionChange = useCallback(detail => {
    if (onSelectionChange && data) {
      const keys = excludeGroup(data, detail.value);
      if (isSameKey(keys, detail.value)) {
        onSelectionChange(detail);
      } else if (keys.keys && keys.keys.size > 0) {
        onSelectionChange({
          ...detail,
          value: keys
        });
      }
    }
  }, [onSelectionChange, data]);
  const customItemRenderer = context => {
    const itemKey = context.listItemContext.metadata.key;
    const options = data && onToggle ? {
      expanded: containsKey(data.expanded, itemKey),
      onToggle
    } : undefined;
    const itemContext = createHierarchicalContext(context.listItemContext, options);
    if (itemContext.leaf) {
      return context.defaultListItem(itemContext, {
        itemDepth: itemContext.depth + 1
      });
    } else {
      return jsx(ListGroupHeader, {
        ariaDescribedBy: stableDescId,
        itemKey: itemContext.metadata.key,
        itemIndex: itemContext.index,
        itemDepth: itemContext.depth,
        isFocused: context.isFocused,
        isFocusRingVisible: context.isFocusRingVisible,
        isActive: context.isActive,
        isGridlineVisible: false,
        isExpandable: true,
        expandedKeys: data == null ? emptyKeys : data.expanded,
        onToggle: onToggle,
        children: children(itemContext)
      }, itemContext.metadata.key);
    }
  };
  return jsxs(Fragment, {
    children: [jsx(List, {
      isVirtualized: false,
      currentKey: currentKey,
      data: data,
      role: "treegrid",
      loadingIndicator: jsx(GroupLoadingIndicator, {}),
      onSelectionChange: handleSelectionChange,
      customItemRenderer: customItemRenderer,
      eventHandlers: expandCollapseProps,
      ...props,
      children: context => {
        return children(context);
      }
    }), onToggle && jsxs(Fragment, {
      children: [jsx(LiveRegion, {
        children: statusText
      }), jsx("span", {
        id: stableDescId,
        children: jsx(HiddenAccessible, {
          children: translations.expandableList_expandCollapseInstructionText()
        })
      })]
    })]
  });
}
const emptyKeys = {
  all: false,
  keys: new Set()
};
const Expander = memo(props => {
  const styles = {
    base: "_1rxzn1f"
  };
  const classes = classNames([styles.base, 'oj-listview-expander']);
  const actionHandler = () => {
    props.onToggle({
      value: props.itemKey
    });
  };
  return jsx("span", {
    class: classes,
    role: "presentation",
    children: jsx(Button, {
      onAction: actionHandler,
      variant: "ghost",
      startIcon: props.expanded ? jsx(SvgChevronDown, {
        size: "6x"
      }) : jsx(CollapseIcon, {
        size: "6x"
      })
    })
  });
}, (prev, next) => {
  return prev.itemKey === next.itemKey && prev.expanded === next.expanded && prev.onToggle === next.onToggle;
});

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

export { ExpandableList };
//# sourceMappingURL=UNSAFE_ExpandableList.js.map
